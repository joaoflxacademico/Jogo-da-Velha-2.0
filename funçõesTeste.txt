const simbolo = ['x','!','$','o','?','%']//Criação dos simbolos que serão utilizados no jogo.


// função jogada da vez versão 1-João Vitor
const jogada_da_vez = (ultima_jogada,simboloA,simboloB) =>{//Função com o objetivo de alterenar o simbolo da jogada atual.
  if(ultima_jogada==simboloA){return simboloB}
  else{return simboloA} 
}

// função jogada da vez versão 2-Wendel
const contador_geral = 0
const jogada_da_vez = (ultima_jogada,simboloA,simboloB) =>{//Função com o objetivo de alterenar o simbolo da jogada atual.
  if(ultima_jogada%2==0){return simboloA}
  if(ultima_jogada%2==1){return simboloB} 
}

// Função de seleção de simbolos-João vitor
const simbolos = (num) =>{switch (num) {// Função auxiliar que irá selecionar qual é o simbolo sorteado pelo 'Math.random'
   case 0: return simbolo[0]
   case 1: return simbolo[1]
   case 2: return simbolo[2]
   case 3: return simbolo[3]
   case 4: return simbolo[4]
   case 5: return simbolo[5]
 }
 }

// função aleatoriedade dos simbolos-João vitor
 const turno = (simboloA=simbolo[0],simboloB=simbolo[3],cont=0) => { /**  Função que irá utilizar da recursividade para repetir os turnos com os simbolos diferentes,
   esses que serão sorteados pela função auxiliar 'simbolos' */ //Essa função já inicia o jogo com os simbolos 'x' e 'o', isso pode ser alterado posteriormente.
   if (cont=4){
     const num1 = Math.floor(Math.random()*3)//Utilização da função 'Math.random' para randomizar as escolhas do simbolos.
     const num2 = Math.floor(Math.random()*3)+3
     return turno(simbolos(num1),simbolos(num2),cont=0)}//Retorno de uma nova rodada, após duas rodadas, com novos simbolos e o seu contador zerado.
     else{
       return turno(simboloA,simboloB,cont+1/*função de rodada, ou função clique/)
     }
 }
// fnção de clique versão 1-Wendel
 const clique=(celula)=>{
   const index = celula.target.getAttribute("data-i")
   celula.target.innerHTML=jogada_da_vez(contador_geral,simbolo[0],simbolo[3])
   contador_geral=contador_geral+1
   celula.target.removeEventListener("onclick", clique(celula));

 }


// função de clique versão 2-Jorge
//linkando a constante ao arquivio html
const table = document.querySelectorAll(".cell button")

//variave até descobrir uma melhor forma de resolver o problema
let iscircleturn = false

//função para mudar a casa do botão que foi clicado
const handleclick = (e) => {
    const cell = e.target
    const classtoadd = iscircleturn? "o":"x"
    e.target.innerHTML = "x"  
}

//função para definir a ação a ser tomada quando o botão for clicado
for (const cell of table) {
    cell.addEventListener("click", handleclick, { once: true})
}

// função de matriz versão 1-Jackson
// Função tem como parametro uma matriz ,um simbolo que vai ser verificado,linha da matriz,coluna da matriz e as direçoes)
function verificarSequencia(matriz, símbolo, linha, coluna, direcaoLinha, direcaoColuna, contador = 0) {
  const linhas = matriz.length
  const colunas = matriz[0].length
//vai verificar se determinado elemento realmente pertence a matriz dada se n exister ou se o simbolo é diferente do simbolo que o código esta prcurando e retorna false caso essapreposições anterioress sejam verdadeiras   
  if (linha < 0 || linha >= linhas || coluna < 0 || coluna >= colunas || matriz[linha][coluna] !== símbolo) {
    return false
  }

  if (contador === 3) {
    return true
  }
//chamada recursiva da propria função porem avançando uma casa da matriz para verificar toda a funçãp
  return verificarSequencia(matriz, símbolo, linha + direcaoLinha, coluna + direcaoColuna, direcaoLinha, direcaoColuna, contador + 1)
}

// Função para verificar se existem 4 símbolos iguais em qualquer direção
function verificarMatriz(matriz) {
  const directions = [
    [0, 1],   // Direita
    [1, 0],   // baixo
    [1, 1],   // Diagonal  direita
    [1, -1],  // Diagonal  esquerda
  ];
//vai ver se existe uma sequencia de simbolos em uma posição nao sendo ele vazio
  const verificaPosicao = (i, j) => {
    const símbolo = matriz[i][j]

    if (símbolo !== ' ') {
      return directions.some(([di, dj]) => verificarSequencia(matriz, símbolo, i, j, di, dj))
    }

    return false;
  }
//
  return matriz.some((row, i) => row.some((_, j) => verificaPosicao(i, j)))
}

const minhaMatriz =  [
  ['A', 'B', 'C', 'D', 'E', 'F', 'G'],
  ['H', 'A', 'J', 'K', 'L', 'M', 'N'],
  ['O', 'P', 'G', 'R', 'S', 'T', 'U'],
  ['V', 'W', 'X', 'A', 'Z', '0', '1'],
  ['2', '3', '4', '5', '6', '7', '8'],
  ['9', '!', '@', '#', '$', '%', '^'],
  ['&', '*', '(', ')', '_', '+', '=']
]

if (verificarMatriz(minhaMatriz)) {
  console.log('Existem 4 símbolos iguais na matriz.')
} else {
  console.log('Não existem 4 símbolos iguais na matriz.')
}


//codigo do jogo da velha original modificado para rodar no tbuleiro 7x7 e marcar pontos com sequencias de 4-Jorge(usando a matriz feita por Jackson)
const currentPlayer = document.querySelector(".currentPlayer");

let selected;
let player = "X";

const positions = [
  [1, 2, 3, 4], [2, 3, 4, 5], [3, 4, 5, 6], [4, 5, 6, 7],
  [8, 9, 10, 11], [9, 10, 11, 12], [10, 11, 12, 13], [11, 12, 13, 14],
  [15, 16, 17, 18], [16, 17, 18, 19], [17, 18, 19, 20], [18, 19, 20, 21],
  [22, 23, 24, 25], [23, 24, 25, 26], [24, 25, 26, 27], [25, 26, 27, 28],
  [29, 30, 31, 32], [30, 31, 32, 33], [31, 32, 33, 34], [32, 33, 34, 35],
  [36, 37, 38, 39], [37, 38, 39, 40], [38, 39, 40, 41], [39, 40, 41, 42],
  [43, 44, 45, 46], [44, 45, 46, 47], [45, 46, 47, 48], [46, 47, 48, 49],
  [1, 8, 15, 22], [2, 9, 16, 23], [3, 10, 17, 24], [4, 11, 18, 25],
  [5, 12, 19, 26], [6, 13, 20, 27], [7, 14, 21, 28], [8, 15, 22, 29],
  [9, 16, 23, 30], [10, 17, 24, 31], [11, 18, 25, 32], [12, 19, 26, 33],
  [13, 20, 27, 34], [14, 21, 28, 35], [15, 22, 29, 36], [16, 23, 30, 37],
  [17, 24, 31, 38], [18, 25, 32, 39], [19, 26, 33, 40], [20, 27, 34, 41],
  [21, 28, 35, 42], [22, 29, 36, 43], [23, 30, 37, 44], [24, 31, 38, 45],
  [25, 32, 39, 46], [26, 33, 40, 47], [27, 34, 41, 48], [28, 35, 42, 49],
  [1, 9, 17, 25], [2, 10, 18, 26], [3, 11, 19, 27], [4, 12, 20, 28],
  [8, 16, 24, 32], [9, 17, 25, 33], [10, 18, 26, 34], [11, 19, 27, 35],
  [15, 23, 31, 39], [16, 24, 32, 40], [17, 25, 33, 41], [18, 26, 34, 42],
  [22, 30, 38, 46], [23, 31, 39, 47], [24, 32, 40, 48], [25, 33, 41, 49],
  [4, 10, 16, 22], [5, 11, 17, 23], [6, 12, 18, 24], [7, 13, 19, 25],
  [11, 17, 23, 29], [12, 18, 24, 30], [13, 19, 25, 31], [14, 20, 26, 32],
  [18, 24, 30, 36], [19, 25, 31, 37], [20, 26, 32, 38], [21, 27, 33, 39],
  [25, 31, 37, 43], [26, 32, 38, 44], [27, 33, 39, 45], [28, 34, 40, 46]
];

function init() {
  selected = [];

  currentPlayer.innerHTML = `JOGADOR DA VEZ: ${player}`;

  document.querySelectorAll(".cell button").forEach((item) => {
    item.innerHTML = "";
    item.addEventListener("click", newMove);
  });
}

init();

function newMove(e) {
  const index = e.target.getAttribute("id");
  e.target.innerHTML = player;
  e.target.removeEventListener("click", newMove);
  selected[index] = player;

  setTimeout(() => {
    check();
  }, [100]);

  player = player === "X" ? "O" : "X";
  currentPlayer.innerHTML = `JOGADOR DA VEZ: ${player}`;
}

function check() {
  let playerLastMove = player === "X" ? "O" : "X";

  const items = selected
    .map((item, i) => [item, i])
    .filter((item) => item[0] === playerLastMove)
    .map((item) => item[1]);

  for (pos of positions) {
    if (pos.every((item) => items.includes(item))) {
      alert("O JOGADOR '" + playerLastMove + "' GANHOU!");
      init();
      return;
    }
  }

  if (selected.filter((item) => item).length === 49) {
    alert("DEU EMPATE!");
    init();
    return;
  }
}

// Instruções para a criação da função de matriz
const v1 = document.getElementById("00").value
console.log(v1)
document.getElementById("output").innerHTML








//******************************************************************************************************************



const simbolo = [['X','♣','♠'],['O','♦','♥']]//Criação dos simbolos que serão utilizados no jogo, separados os para cada player.

// Criar uma matriz vazia 7x7
function criarMatrizVazia(linhas, colunas) {
  return Array.from({ length: linhas }, () => Array(colunas).fill(''));
}
const matrizVazia = criarMatrizVazia(7, 7);

// Agora você tem uma matriz 7x7 preenchida com valores vazios ('')

const currentPlayer = document.querySelector(".currentPlayer");

function geral(matriz = [...criarMatrizVazia(7,7)],player1 = simbolo[0][Math.floor(Math.random()*3)],player2 = simbolo[1][Math.floor(Math.random()*3)],player = player1,contador=0){


function init() {
console.log(matriz)
  currentPlayer.innerHTML = `JOGADOR DA VEZ: ${player}`; // Apresenta qual o atual jogador da vez

  document.querySelectorAll(".cell button").forEach((item) => {//!
    item.innerHTML = ""; // Transforma todos os textos dos botões em vazios 
    item.addEventListener("click", newMove); // Adiciona a ação de clique em cada botão da matriz
  });
}
contador==0?init():// Inicia a partida quando geral se inicia


function newMove(e) {
  const index = e.target.getAttribute("id");
  e.target.innerHTML = player; // Vai inserir o simbolo do jogador dentro do texto do botão clicado
  e.target.removeEventListener("click", newMove);// Remove a ação de clique do botão já selecionado 
  linha = e.target.value[0] // Define a linha do botão acionado
  coluna = e.target.value[1] // Define a coluna do botão acionado 
  const novaMatriz = matriz[parseInt(linha)][parseInt(coluna)] = player // Adiciona o simbolo na matriz criada por meio dos indexes da respectiva linha e coluna
  setTimeout(() => {
    if (verificarMatriz(matriz)) { // Verifica a matriz se algum jogador ganhou por meio da função verificarMatriz 
  alert(`JOGADOR ${contador%2?player1:player2} GANHOU`)// Apresenta o jogador vencedor
  geral()
}
    else if(contador==49){ // Termina o jogo em um empate se a matriz está completa
  alert(`DEU EMPATE`)
  geral()
}
}, [100]);
  const novoContador=contador+1;
  if(contador%4 == 0){const novoPlayer1 = simbolo[0][Math.floor(Math.random()*3)];//na 4ª partida, troca o símbolo do player 1
                      const novoPlayer = player1;
                      geral(novaMatriz,novoPlayer1,player2,novoPlayer,novoContador)}
  else{
        if((contador-1)%4 == 0){const novoPlayer2 = simbolo[1][Math.floor(Math.random()*3)]//na 5ª partida, troca o símbolo do player 1
          const novoPlayer = player2;
          geral(novaMatriz,player1,novoPlayer2,novoPlayer,novoContador)}
          else{
              if(contador%2 == 0){
                const novoPlayer = player1;
                geral(novaMatriz,player1,player2,novoPlayer,novoContador)}
                else{//se a jogada for par, quem joga é o player 1
                    if(contador%2 == 1){
                    const novoPlayer = player2;
                    geral(novaMatriz,player1,player2,novoPlayer,novoContador)}//se a jogada for impar, quem joga é o player 2
       }
                              
                            }
  }
  //player = simbolo[contador%2][Math.floor(Math.random()*3)];
  currentPlayer.innerHTML = `JOGADOR DA VEZ: ${player}`;
}


}
geral()

//código para verificar vitória  

// Função tem como parametro uma matriz ,um simbolo que vai ser verificado,linha da matriz,coluna da matriz e as direçoes)
function verificarSequencia(matriz, símbolo, linha, coluna, direcaoLinha, direcaoColuna, contador = 0) {
  const linhas = matriz.length
  const colunas = matriz[0].length
//vai verificar se determinado elemento reaalmente pertence a matriz dada se n exister ouse o simbolo é diferente do simbolo que o código esta prcurando e retorna false caso essapreposições anterioress sejam verdadeiras   
  if (linha < 0 || linha >= linhas || coluna < 0 || coluna >= colunas || matriz[linha][coluna] !== símbolo) {
    return false
  }

  if (contador === 3) {
    return true
  }
//chamada recursiva da propria função porem avançando uma casa da matriz para verificar toda a funçãp
  return verificarSequencia(matriz, símbolo, linha + direcaoLinha, coluna + direcaoColuna, direcaoLinha, direcaoColuna, contador + 1)
}

// Função para verificar se existem 4 símbolos iguais em qualquer direção
function verificarMatriz(matriz) {
  const directions = [
    [0, 1],   // Direita
    [1, 0],   // baixo
    [1, 1],   // Diagonal  direita
    [1, -1],  // Diagonal  esquerda
  ];
//vai ver se existe uma sequencia de simbolos em uma posição nao sendo ele vazio
  const verificaPosicao = (i, j) => {
    const símbolo = matriz[i][j]
// Verifica apenas se a posição não está vazia
    if (símbolo !== '') 
    // Verifica se há uma sequência em alguma das direções possíveis
    
    
    {
      return directions.some(([di, dj]) => verificarSequencia(matriz, símbolo, i, j, di, dj))
    }

    return false;
  }
//
  return matriz.some((row, i) => row.some((_, j) => verificaPosicao(i, j)))
}
